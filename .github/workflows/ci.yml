# .github/workflows/ci.yml
name: Symfony Auth Methods CI

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master, dev ]

jobs:
  security:
    name: ðŸ”’ Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, pdo_mysql
          coverage: none
        
      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Security check (composer.lock)
        run: composer require --dev symfony/security-checker && php bin/console security:check

      - name: Security check (OWASP Dependency Checker)
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'auth-methods'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --suppression suppression.xml
      
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: Security Report
          path: reports

  lint:
    name: ðŸ§¹ Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, pdo_mysql
          coverage: none
        
      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: PHP CS Fixer
        run: vendor/bin/php-cs-fixer fix --dry-run --diff

      - name: PHPStan
        run: vendor/bin/phpstan analyse -l 5 src tests

  test:
    name: ðŸ§ª Test
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: auth_methods_test
          MYSQL_USER: app_user
          MYSQL_PASSWORD: app_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, pdo_mysql, redis
          coverage: xdebug
        
      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Copy env test
        run: cp .env.test.dist .env.test

      - name: Run PHPUnit tests
        run: |
          bin/console doctrine:database:create --env=test --if-not-exists
          bin/console doctrine:schema:create --env=test
          bin/console doctrine:fixtures:load --env=test --no-interaction
          XDEBUG_MODE=coverage ./bin/phpunit --coverage-clover coverage.xml
        env:
          DATABASE_URL: mysql://app_user:app_password@127.0.0.1:3306/auth_methods_test?serverVersion=8.0
          REDIS_URL: redis://localhost:6379

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  deploy:
    name: ðŸš€ Deploy
    runs-on: ubuntu-latest
    needs: [security, lint, test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, pdo_mysql
        
      - name: Install dependencies
        run: composer install --prefer-dist --no-dev --optimize-autoloader

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        if: ${{ secrets.SSH_PRIVATE_KEY != '' }}

      - name: Deploy to production
        run: |
          echo "Deploying to production server..."
          # This step would typically use a deployment tool like Deployer or a custom script
          # For this template, we're just simulating the deployment step
        if: ${{ secrets.SSH_PRIVATE_KEY != '' }}
